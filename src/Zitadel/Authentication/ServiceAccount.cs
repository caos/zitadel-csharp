using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Json;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Jose;
using Microsoft.IdentityModel.Protocols;
using Microsoft.IdentityModel.Protocols.OpenIdConnect;
using Microsoft.IdentityModel.Tokens;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.OpenSsl;
using Org.BouncyCastle.Security;

namespace Zitadel.Authentication
{
    /// <summary>
    /// A Zitadel <see cref="ServiceAccount"/> can be loaded from a json file
    /// and helps with authentication on a Zitadel IAM.
    ///
    /// The mechanism is defined here:
    /// <a href="https://docs.zitadel.ch/documentation#JSON_Web_Token_JWT_Profile">Zitadel Docs</a>
    /// </summary>
    public record ServiceAccount
    {
        private const string DiscoveryEndpointPath = "/.well-known/openid-configuration";
        private static readonly HttpClient HttpClient = new();

        /// <summary>
        /// The user account type.
        /// </summary>
        public const string Type = "serviceaccount";

        /// <summary>
        /// This is unique ID (on Zitadel) of the key.
        /// </summary>
        public string KeyId { get; init; } = string.Empty;

        /// <summary>
        /// The ID of the <see cref="ServiceAccount"/>, this is the same as the subject ("sub") from tokens.
        /// </summary>
        public string UserId { get; init; } = string.Empty;

        /// <summary>
        /// The private key generated by Zitadel for this <see cref="ServiceAccount"/>.
        /// </summary>
        public string Key { get; init; } = string.Empty;

        private SecurityKey SecurityKey => new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Key));

        private SigningCredentials SigningCredentials =>
            new(SecurityKey, SecurityAlgorithms.RsaSha256);

        public async Task<string> AuthenticateAsync(string discoveryEndpoint, AuthenticationOptions options)
        {
            var manager = new ConfigurationManager<OpenIdConnectConfiguration>(
                DiscoveryEndpoint(discoveryEndpoint),
                new OpenIdConnectConfigurationRetriever(),
                new HttpDocumentRetriever(HttpClient));

            var oidcConfig = await manager.GetConfigurationAsync();

            var jwt = await GetSignedJwt(options);
            var request = new HttpRequestMessage(HttpMethod.Post, oidcConfig.TokenEndpoint)
            {
                Content = new FormUrlEncodedContent(
                    new[]
                    {
                        new KeyValuePair<string?, string?>("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer"),
                        new KeyValuePair<string?, string?>(
                            "assertion",
                            $"{jwt}"),
                        new KeyValuePair<string?, string?>("scope", options.CreateScope()),
                    }),
            };

            var response = await HttpClient.SendAsync(request);
            var token = await response
                .EnsureSuccessStatusCode()
                .Content
                .ReadFromJsonAsync<AccessTokenResponse>();

            return token?.AccessToken ?? throw new Exception("Access token could not be parsed.");
        }

        private async Task<RSAParameters> GetRsaParameters()
        {
            var bytes = Encoding.UTF8.GetBytes(Key);
            await using var ms = new MemoryStream(bytes);
            using var sr = new StreamReader(ms);
            var pemReader = new PemReader(sr);

            if (!(pemReader.ReadObject() is AsymmetricCipherKeyPair keyPair))
            {
                throw new Exception("RSA Keypair could not be read.");
            }

            return DotNetUtilities.ToRSAParameters(keyPair.Private as RsaPrivateCrtKeyParameters);
        }

        private async Task<string> GetSignedJwt(AuthenticationOptions options)
        {
            using var rsa = new RSACryptoServiceProvider();
            rsa.ImportParameters(await GetRsaParameters());

            var payload = options.CreateClaims(UserId);
            return JWT.Encode(
                payload,
                rsa,
                JwsAlgorithm.RS256,
                new Dictionary<string, object>
                {
                    { "kid", KeyId },
                });
        }

        /// <summary>
        /// Load a <see cref="ServiceAccount"/> from a file at a given (relative or absolute) path.
        /// </summary>
        /// <param name="pathToJson">The relative or absolute filepath to the json file.</param>
        /// <returns>The parsed <see cref="ServiceAccount"/>.</returns>
        /// <exception cref="FileNotFoundException">When the file does not exist.</exception>
        /// <exception cref="InvalidDataException">When the deserializer returns 'null'.</exception>
        /// <exception cref="JsonException">
        /// Thrown when the JSON is invalid,
        /// the <see cref="ServiceAccount"/> type is not compatible with the JSON,
        /// or when there is remaining data in the Stream.
        /// </exception>
        public static async Task<ServiceAccount> LoadFromJsonFileAsync(string pathToJson)
        {
            var path = Path.GetFullPath(
                Path.IsPathRooted(pathToJson)
                    ? pathToJson
                    : Path.Join(Directory.GetCurrentDirectory(), pathToJson));

            if (!File.Exists(path))
            {
                throw new FileNotFoundException($"File not found: {path}.", path);
            }

            await using var stream = File.OpenRead(path);
            return await LoadFromJsonStreamAsync(stream);
        }

        /// <summary>
        /// Load a <see cref="ServiceAccount"/> from a given stream (FileStream, MemoryStream, ...).
        /// </summary>
        /// <param name="stream">The stream to read the json from.</param>
        /// <returns>The parsed <see cref="ServiceAccount"/>.</returns>
        /// <exception cref="InvalidDataException">When the deserializer returns 'null'.</exception>
        /// <exception cref="JsonException">
        /// Thrown when the JSON is invalid,
        /// the <see cref="ServiceAccount"/> type is not compatible with the JSON,
        /// or when there is remaining data in the Stream.
        /// </exception>
        public static async Task<ServiceAccount> LoadFromJsonStreamAsync(Stream stream) =>
            await JsonSerializer.DeserializeAsync<ServiceAccount>(
                stream,
                new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase }) ??
            throw new InvalidDataException("The json file yielded a 'null' result for deserialization.");

        /// <summary>
        /// Load a <see cref="ServiceAccount"/> from a string that contains json.
        /// </summary>
        /// <param name="json">Json string.</param>
        /// <returns>The parsed <see cref="ServiceAccount"/>.</returns>
        /// <exception cref="InvalidDataException">When the deserializer returns 'null'.</exception>
        /// <exception cref="JsonException">
        /// Thrown when the JSON is invalid,
        /// the <see cref="ServiceAccount"/> type is not compatible with the JSON,
        /// or when there is remaining data in the Stream.
        /// </exception>
        public static async Task<ServiceAccount> LoadFromJsonStringAsync(string json)
        {
            await using var memoryStream = new MemoryStream(Encoding.UTF8.GetBytes(json), 0, json.Length);
            return await LoadFromJsonStreamAsync(memoryStream);
        }

        private static string DiscoveryEndpoint(string discoveryEndpoint) =>
            discoveryEndpoint.EndsWith(DiscoveryEndpointPath)
                ? discoveryEndpoint
                : discoveryEndpoint.EndsWith('/')
                    ? discoveryEndpoint + DiscoveryEndpointPath.Substring(1)
                    : discoveryEndpoint + DiscoveryEndpointPath;

        public record AuthenticationOptions
        {
            public IList<string> Audiences { get; init; } = new List<string>();

            public TimeSpan Expiry { get; init; } = new(0, 15, 0);

            public string Issuer { get; init; } = "localhost";

            public IList<string> AdditionalScopes { get; init; } = new List<string>();

            public IList<string> ProjectAudiences { get; init; } = new List<string>();

            public string? PrimaryDomain { get; init; }

            public IList<string> RequiredRoles { get; init; } = new List<string>();

            internal IDictionary<string, object> CreateClaims(string userId)
            {
                if (Expiry.TotalHours <= 0 || Expiry.TotalHours > 1)
                {
                    throw new ArgumentOutOfRangeException(
                        nameof(Expiry),
                        "Expiry date is below 0 or bigger than 1 hour!");
                }

                return new Dictionary<string, object>
                {
                    { "iss", Issuer },
                    { "sub", userId },
                    { "iat", DateTimeOffset.Now.ToUnixTimeSeconds() },
                    { "exp", ((DateTimeOffset)DateTime.Now.Add(Expiry)).ToUnixTimeSeconds() },
                    {
                        "aud",
                        !Audiences.Any()
                            ? Issuer
                            : Audiences.Count() == 1
                                ? Audiences.First()
                                : Audiences.ToList()
                    },
                };
            }

            internal string CreateScope() =>
                string.Join(
                    ' ',
                    new[]
                        {
                            "openid",
                            PrimaryDomain != null
                                ? $"urn:zitadel:iam:org:domain:primary:{PrimaryDomain}"
                                : string.Empty,
                        }
                        .Union(AdditionalScopes)
                        .Union(ProjectAudiences.Select(p => $"urn:zitadel:iam:org:project:id:{p}:aud"))
                        .Union(RequiredRoles.Select(r => $"urn:zitadel:iam:org:project:role:{r}"))
                        .Where(s => !string.IsNullOrWhiteSpace(s)));
        }

        private record AccessTokenResponse
        {
            [JsonPropertyName("access_token")]
            public string AccessToken { get; init; } = string.Empty;
        }
    }
}
